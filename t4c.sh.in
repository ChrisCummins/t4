#!/bin/sh
#
#   t4c.sh - t4 script compiler
#   ===========================
#
# t4 version @T4_VERSION@
# Copyright (C) 2013 Christopher E. Cummins
# Released under MIT license, <http://opensource.org/licenses/MIT>
# Written by Christopher E. Cummins

T4_MACROS_DIR="@prefix@/share/t4c-@T4_VERSION@"
T4_MACROS_FILE="$T4_MACROS_DIR/t4.m4"

# internal state variables
T4C_VERBOSE=0 # verbosely report processing
T4C_DEBUG=0   # don't remove temporary files
T4C_OUT=0     # imply output from input file

verbose() {
    local string="$1"

    if (( $T4C_VERBOSE )); then
        echo "t4c: $string"
    fi
}

print_version() {
cat <<EOF
t4 @T4_VERSION@
Copyright (C) 2013 Christopher E. Cummins
Released under MIT license, <http://opensource.org/licenses/MIT>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Christopher E. Cummins.
EOF
}

print_help() {
    cat <<EOF
Usage: $(basename $0) [OPTION] TEST-FILE [SCRIPT]

Generate a test script from a TEST-FILE. Output is sent to the standard
out, else to the file SCRIPT if given.

Operation modes:
  -h, --help                print this help, then exit
  -V, --version             print version number, then exit
  -v, --verbose             verbosely report processing
  -d, --debug               don't remove temporary files

Report bugs to <chrisc.101@gmail.com>.
EOF
}

get_temp_file() {
    local in=$(basename "$1")

    echo "/tmp/t4c-$(date '+%s')-$in"
}

generate_script() {
    local out="$1"
    local in="$2"

    if [ "$out" == /dev/stdout ]; then
        local t4c_out="$(get_temp_file "$2")"
    else
        local t4c_out="$out.t4c"
    fi

    touch "$out" >/dev/null 2>&1
    if (( $? )); then
        echo "t4c: cannot write to file '$out'" >&2
        exit 1
    fi

    touch "$t4c_out" >/dev/null 2>&1
    if (( $? )); then
        echo "t4c: cannot write to file '$t4c_out'" >&2
        exit 1
    fi

    verbose "generating '$t4c_out'"
    cat <<EOF > "$t4c_out"
#!/bin/bash
# Create test scripts.
# Generated by t4c @T4_VERSION@ from "$in".
#
# Report bugs to <chrisc.101@gmail.com>.
#
# Copyright (C) 2013 Christopher E. Cummins.
#
# This test script is free software; the terms of the MIT license
# gives unlimited permission to copy, distribute and modify it.
divert(-1)
changequote([,])
include($T4_MACROS_FILE)
divert(0)dnl
EOF

    # append input file to temporary file
    cat "$in" >> "$t4c_out"

    verbose "processing m4 file '$t4c_out'"
    m4 --include "$T4_MACROS_DIR" "$t4c_out" > "$out"
    chmod +x "$out"

    if ! (( $T4C_DEBUG )); then
        verbose "removing m4 file '$t4c_out'"
        rm -f "$t4c_out"
    fi
}

main() {
    for arg in $@; do
        case $arg in
            "-h" | "--help")
                print_help
                exit 0
                ;;
            "-V" | "--version")
                print_version
                exit 0
                ;;
            "-v" | "--verbose")
                T4C_VERBOSE=1
                shift
                ;;
            "-d" | "--debug")
                T4C_DEBUG=1
                shift
                ;;
            "-o" | "--output")
                T4C_OUT=1
                shift
                ;;
        esac
    done

    local in="$1"
    local out="$2"

    # check for input file else fail
    if [ -z "$in" ]; then
        echo "t4c: no input file given" >&2
        exit 1
    fi

    # check for input file else fail
    if [[ ! -f "$in" ]]; then
        echo "t4c: cannot open input file '$in'" >&2
        exit 1
    fi

    if [ -z "$out" ] && (( $T4C_OUT )); then
        out="${in%.t4}"

        if [[ "$out" == "$in" ]]; then
            out=""
        fi
    fi

    # check for output file else use stdout
    if [ -z "$out" ]; then
        out=/dev/stdout
    fi

    generate_script "$out" "$in"
}
main $@
